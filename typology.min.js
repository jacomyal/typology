/**
 * typology - A data validation library for Node.js and the browser.
 * @version v0.2.1
 * @link https://github.com/jacomyal/typology
 * @license MIT
 */
!function(){"use strict";function e(e){function t(e,i){var s,a,l,u,f,d,h,p,y=!1,c=!1,g=r.get(e);if("string"===r.get(i)){for(s=i.replace(/^[\?\!]/,"").split(/\|/),l=s.length,a=0;l>a;a++)if(o.indexOf(s[a])<0&&!(s[a]in n))throw new Error("Invalid type.");if(i.match(/^\?/)&&(y=!0),i.replace(/^\?/,"").match(/^\!/)&&(c=!0),c&&y)throw new Error("Invalid type.");for(a in s)if(n[s[a]]&&("function"==typeof n[s[a]].type?n[s[a]].type.call(r,e)===!0:!t(e,n[s[a]].type)))return c?(f=new Error,f.message='The type "'+s[a]+'" is not allowed',f.matched=s[a],f.type=i,f.value=e,f):null;return null===e||void 0===e?c||y?null:(f=new Error,f.message='The type "'+e+'" is not allowed.',f.type=i,f.value=e,f):(h=~s.indexOf("*"),p=~s.indexOf(g),c&&(h||p)?(f=new Error,f.message='The type "'+(p?g:"*")+'" is not allowed.',f.matched=p?g:"*",f.type=i,f.value=e,f):c||h||p?null:(f=new Error,f.message='The type "'+g+'" is not allowed.',f.type=i,f.value=e,f))}if("object"===r.get(i)){if("object"!==g)return f=new Error,f.message="An object is expected.",f.type=i,f.value=e,f;for(u in i)if(d=t(e[u],i[u]))return f=new Error,f.message="A sub-object does not match the required type.",f.subError=d,f.key=u,f.type=i,f.value=e,f;for(u in e)if(void 0===i[u])return f=new Error,f.message='The key "'+u+'" is not expected.',f.type=i,f.value=e,f;return null}if("array"===r.get(i)){if(1!==i.length)throw new Error("Invalid type.");if("array"!==g)return f=new Error,f.message="An array is expected.",f.type=i,f.value=e,f;for(l=e.length,a=0;l>a;a++)if(d=t(e[a],i[0]))return f=new Error,f.message="The "+a+"-th element of the array does not match the required type.",f.subError=d,f.key=a,f.type=i,f.value=e,f;return null}throw new Error("Invalid type.")}var r=this,n={};if(this.add=function(e,t){var r,i,s,a,l,u;if(1===arguments.length){if("object"!==this.get(e))throw new Error("If types.add is called with one argument, this one has to be an object.");r=e,a=r.id,u=r.type}else{if(2!==arguments.length)throw new Error("types.add has to be called with one or two arguments.");if("string"!=typeof e||!e)throw new Error("If types.add is called with more than one argument, the first one must be the string id.");a=e,u=t}if("string"!==this.get(a)||0===a.length)throw new Error("A type requires an string id.");if(void 0!==n[a]&&"proto"!==n[a])throw new Error('The type "'+a+'" already exists.');if(~o.indexOf(a))throw new Error('"'+a+'" is a reserved type name.');n[a]=1,s=(r||{}).proto||[],s=Array.isArray(s)?s:[s],l={};for(i in s)void 0===n[s[i]]&&(n[s[i]]=1,l[s[i]]=1);if("function"!==this.get(u)&&!this.isValid(u))throw new Error("A type requires a valid definition. This one can be a preexistant type or else a function testing given objects.");if(n[a]=void 0===r?{id:a,type:u}:{},void 0!==r)for(i in r)n[a][i]=r[i];for(i in l)i!==a&&delete n[i];return this},this.has=function(e){return!!n[e]},this.get=function(e){return null===e||void 0===e?String(e):i[Object.prototype.toString.call(e)]||"object"},this.check=function(e,r){return!t(e,r)},this.isValid=function(e){var t,r,i;if("string"===this.get(e)){t=e.replace(/^[\?\!]/,"").split(/\|/);for(i in t)if(o.indexOf(t[i])<0&&!(t[i]in n))return!1;return!0}if("object"===this.get(e)){for(r in e)if(!this.isValid(e[r]))return!1;return!0}return"array"===this.get(e)&&1===e.length?this.isValid(e[0]):!1},this.add("type",function(e){return this.isValid(e)}.bind(this)),this.add("primitive",function(e){return!e||!(e instanceof Object||"object"==typeof e)}),e=e||{},"object"!==this.get(e))throw Error("Invalid argument.");for(var s in e)this.add(s,e[s])}var t,r,n=["Arguments","Boolean","Number","String","Function","Array","Date","RegExp","Object"],i={},o=["*"];for(t in n)r=n[t],o.push(r.toLowerCase()),i["[object "+r+"]"]=r.toLowerCase();var s=e;e.call(s),Object.defineProperty(s,"version",{value:"0.2.1"}),"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=s),exports.types=s):"function"==typeof define&&define.amd?define("typology",[],function(){return s}):this.types=s}(this);