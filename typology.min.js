/**
 * typology - A data validation library for Node.js and the browser.
 * @version v0.2.1
 * @link https://github.com/jacomyal/typology
 * @license MIT
 */
!function(){"use strict";function e(e){var t={};if(this.add=function(e,r){var i,n,s,a,h,l;if(1===arguments.length){if("object"!==this.get(e))throw new Error("If types.add is called with one argument, this one has to be an object.");i=e,a=i.id,l=i.type}else{if(2!==arguments.length)throw new Error("types.add has to be called with one or two arguments.");if("string"!=typeof e||!e)throw new Error("If types.add is called with more than one argument, the first one must be the string id.");a=e,l=r}if("string"!==this.get(a)||0===a.length)throw new Error("A type requires an string id.");if(void 0!==t[a]&&"proto"!==t[a])throw new Error('The type "'+a+'" already exists.');if(~o.indexOf(a))throw new Error('"'+a+'" is a reserved type name.');t[a]=1,s=(i||{}).proto||[],s=Array.isArray(s)?s:[s],h={};for(n in s)void 0===t[s[n]]&&(t[s[n]]=1,h[s[n]]=1);if("function"!==this.get(l)&&!this.isValid(l))throw new Error("A type requires a valid definition. This one can be a preexistant type or else a function testing given objects.");if(t[a]=void 0===i?{id:a,type:l}:{},void 0!==i)for(n in i)t[a][n]=i[n];for(n in h)n!==a&&delete t[n];return this},this.has=function(e){return!!t[e]},this.get=function(e){return null===e||void 0===e?String(e):n[Object.prototype.toString.call(e)]||"object"},this.check=function(e,t){return!this.validate(e,t)},this.validate=function(e,r){var i,n,s,a,h,l,d,u=!1,f=!1,p=this.get(e);if("string"===this.get(r)){i=r.replace(/^[\?\!]/,"").split(/\|/);for(n in i)if(o.indexOf(i[n])<0&&!(i[n]in t))throw new Error("Invalid type.");if(r.match(/^\?/)&&(u=!0),r.replace(/^\?/,"").match(/^\!/)&&(f=!0),f&&u)throw new Error("Invalid type.");for(n in i)if(t[i[n]]&&("function"==typeof t[i[n]].type?t[i[n]].type.call(this,e)===!0:!this.validate(e,t[i[n]].type)))return f?a={message:'The type "'+i[n]+'" is not allowed',matched:i[n],type:r,value:e}:null;return null===e||void 0===e?f||u?null:a={message:'The type "'+e+'" is not allowed.',type:r,value:e}:(l=~i.indexOf("*"),d=~i.indexOf(p),f&&(l||d)?a={message:'The type "'+(d?p:"*")+'" is not allowed.',matched:d?p:"*",type:r,value:e}:f||l||d?null:a={message:'The type "'+p+'" is not allowed.',type:r,value:e})}if("object"===this.get(r)){if("object"!==p)return a={message:"An object is expected.",type:r,value:e};for(s in r)if(h=this.validate(e[s],r[s]))return a={message:"A sub-object does not match the required type.",subError:h,type:r,value:e};for(s in e)if(void 0===r[s])return a={message:'The key "'+s+'" is not expected.',type:r,value:e};return null}if("array"===this.get(r)){if(1!==r.length)throw new Error("Invalid type.");if("array"!==p)return a={message:"An array is expected.",type:r,value:e};for(s in e)if(h=this.validate(e[s],r[0]))return a={message:"The "+s+"-th element of the array does not match the required type.",subError:h,type:r,value:e};return null}throw new Error("Invalid type.")},this.isValid=function(e){var r,i,n;if("string"===this.get(e)){r=e.replace(/^[\?\!]/,"").split(/\|/);for(n in r)if(o.indexOf(r[n])<0&&!(r[n]in t))return!1;return!0}if("object"===this.get(e)){for(i in e)if(!this.isValid(e[i]))return!1;return!0}return"array"===this.get(e)&&1===e.length?this.isValid(e[0]):!1},this.add("type",function(e){return this.isValid(e)}.bind(this)),this.add("primitive",function(e){return!e||!(e instanceof Object||"object"==typeof e)}),e=e||{},"object"!==this.get(e))throw Error("Invalid argument.");for(var r in e)this.add(r,e[r])}var t,r,i=["Arguments","Boolean","Number","String","Function","Array","Date","RegExp","Object"],n={},o=["*"];for(t in i)r=i[t],o.push(r.toLowerCase()),n["[object "+r+"]"]=r.toLowerCase();var s=e;e.call(s),Object.defineProperty(s,"version",{value:"0.2.1"}),"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=s),exports.types=s):"function"==typeof define&&define.amd?define("typology",[],function(){return s}):this.types=s}(this);